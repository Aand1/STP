<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="1"/><View-Properties><Zoom percentage="100"/></View-Properties><Styles><Layout alignment="left" bullet="none" linespacing="0.0" name="Heading 1" spaceabove="8.0" spacebelow="4.0"/><Layout alignment="left" bullet="none" firstindent="0.0" leftmargin="0.0" linebreak="space" linespacing="0.0" name="Normal" rightmargin="0.0" spaceabove="0.0" spacebelow="0.0"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" opaque="false" size="12"/><Font background="[0,0,0]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" name="Text" opaque="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" family="Serif" name="Heading 1" opaque="false" size="18"/></Styles><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">t is a vector of durations. Considering the fastest duration, t[4]=0 always. j is the vector of applied jerks.</Font></Text-field><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">t := vector(7): t[4] := 0: T := [seq(t[i], i=1..7)];
j := vector(7): j[2] := 0: j[4] := 0: j[6] := 0:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">The following equations are useful for simplification:</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">SEQ := {dc^2 = 1, da^2 = 1, dd^2 = 1}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">The following equations describe the evolution of acceleration and velocity and apply always:</Font></Text-field><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">JEQ := {j[1] = -da * j[3], j[3] = dd * j[5], j[5] = -j[7], j[7] = dc * jmax};
AEQ := [seq(a[i] = a[i-1] + j[i]*t[i], i=1..7)];
VEQ := expand([seq(v[i] = v[i-1] + t[i] * (a[i-1] + 1/2 * j[i]*t[i]), i=1..7)]);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">These equations describe the final conditions:</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">FEQ := [a[7] = 0, v[7] = 0, expand(p0 + sum (t[i] * (v[i-1] + 1/2 * t[i] * (a[i-1] + 1/3 * j[i] * t[i])), i=1..7)) = goal];</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">Normal (no double deceleration) case: acceleration reaches zero between acceleration and deceleration phases</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">dd := 1:</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">TT profile</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">TTEQ := {a[3] = 0, a[1] = dd * dc * amax, a[5] = -dc * amax}:
EQ  := TTEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := solve (TTEQ union {op(AEQ[1..7]), FEQ[1]}, {t[1], t[3], t[5], t[7], seq(a[i],i=1..7)} minus {0}):
subs(subs(JEQ, subs(JEQ, subs(JEQ, subs (JEQ, sols)))), T);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">Express t[6] using t[2]</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := simplify (solve (EQ, VAR), SEQ):
S:=subs (sols, T):
alias(R=op(1,S[2])):
S;</Font>
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Convert the results to C-style code</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[3],optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[4],optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[5],optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6",declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[7],optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">WW profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">WWEQ := {t[5] = 0, t[2] = 0, t[6] = 0}:
EQ  := WWEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := simplify (solve (EQ, VAR), SEQ):
S:=subs(sols,T):</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">alias (R=dc*jmax*S[1]):alias (N=op(1,op(2,S[3]))): S;</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">TW profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">TWEQ := {t[5] = 0, t[6] = 0, a[1] = dd * dc * amax}:
EQ  := TWEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">sols := simplify(solve(EQ, VAR), SEQ):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">S := subs(sols,T);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">alias (R=</Font>op(1,op(3,S)))<Font italic="false" subscript="false" superscript="false" underline="false">: S;</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z4::float, Z3:: float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">WT profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">WTEQ := {t[5] = 0, t[2] = 0, a[5] = -dd * dc * amax}:
EQ  := WTEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">sols := simplify(solve(EQ, VAR), SEQ):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">S := subs(sols,T):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">alias (R=</Font>op(1,S[1]))<Font italic="false" subscript="false" superscript="false" underline="false">: S;</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z4::float, Z3:: float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Text-field/><Text-field/><Text-field/></Worksheet>