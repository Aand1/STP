<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="1"/><View-Properties><Zoom percentage="100"/></View-Properties><Styles><Layout alignment="left" bullet="none" linespacing="0.0" name="Heading 1" spaceabove="8.0" spacebelow="4.0"/><Layout alignment="left" bullet="none" firstindent="0.0" leftmargin="0.0" linebreak="space" linespacing="0.0" name="Normal" rightmargin="0.0" spaceabove="0.0" spacebelow="0.0"/><Layout alignment="centred" bullet="none" linespacing="0.5" name="Maple Output"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" opaque="false" size="12"/><Font background="[0,0,0]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" name="Text" opaque="false" size="12" underline="false"/><Font background="[0,0,0]" family="Monospaced" foreground="[0,0,255]" name="Line Printed Output" opaque="false" readonly="true" size="12"/><Font background="[0,0,0]" bold="true" family="Serif" name="Heading 1" opaque="false" size="18"/><Font background="[0,0,0]" family="Times New Roman" foreground="[0,0,255]" name="2D Output" opaque="false" readonly="true" size="12"/></Styles><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">t is a vector of durations. Considering the fastest duration, t[4]=0 always. j is the vector of applied jerks.</Font></Text-field><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">t := vector(7): t[4] := 0: T := [seq(t[i], i=1..7)];
j := vector(7): j[2] := 0: j[4] := 0: j[6] := 0:</Font></Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSJURzYiNykmSSJ0R0YlNiMiIiImRig2IyIiIyZGKDYjIiIkIiIhJkYoNiMiIiYmRig2IyIiJyZGKDYjIiIo</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">The following equations are useful for simplification:</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">SEQ := {dc^2 = 1, da^2 = 1, dd^2 = 1}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">The following equations describe the evolution of acceleration and velocity and apply always:</Font></Text-field><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">JEQ := {j[1] = -da * j[3], j[3] = dd * j[5], j[5] = -j[7], j[7] = dc * jmax};
AEQ := [seq(a[i] = a[i-1] + j[i]*t[i], i=1..7)];
VEQ := expand([seq(v[i] = v[i-1] + t[i] * (a[i-1] + 1/2 * j[i]*t[i]), i=1..7)]);</Font></Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSRKRVFHNiI8Ji8mSSJqR0YlNiMiIiIsJComSSNkYUdGJUYrJkYpNiMiIiRGKyEiIi9GLyomSSNkZEdGJUYrJkYpNiMiIiZGKy9GNiwkJkYpNiMiIihGMi9GOyomSSNkY0dGJUYrSSVqbWF4R0YlRis=</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSRBRVFHNiI3KS8mSSJhR0YlNiMiIiIsJiZGKTYjIiIhRisqJiZJImpHRiVGKkYrJkkidEdGJUYqRitGKy8mRik2IyIiI0YoLyZGKTYjIiIkLCZGNkYrKiYmRjJGO0YrJkY0RjtGK0YrLyZGKTYjIiIlRjovJkYpNiMiIiYsJkZCRisqJiZGMkZHRismRjRGR0YrRisvJkYpNiMiIidGRi8mRik2IyIiKCwmRk5GKyomJkYyRlNGKyZGNEZTRitGKw==</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSRWRVFHNiI3KS8mSSJ2R0YlNiMiIiIsKCZGKTYjIiIhRisqJiZJInRHRiVGKkYrJkkiYUdGJUYuRitGKyomJkkiakdGJUYqRitGMSIiIyNGK0Y4LyZGKTYjRjgsJkYoRisqJiZGMkY8RismRjRGKkYrRisvJkYpNiMiIiQsKEY7RisqJiZGMkZDRismRjRGPEYrRisqJiZGN0ZDRitGR0Y4RjkvJkYpNiMiIiVGQi8mRik2IyIiJiwoRkxGKyomJkYyRlFGKyZGNEZNRitGKyomJkY3RlFGK0ZVRjhGOS8mRik2IyIiJywmRlBGKyomJkYyRmVuRismRjRGUUYrRisvJkYpNiMiIigsKEZaRisqJiZGMkZdb0YrJkY0RmVuRitGKyomJkY3Rl1vRitGYW9GOEY5</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">These equations describe the final conditions:</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">FEQ := [a[7] = 0, v[7] = 0, expand(p0 + sum (t[i] * (v[i-1] + 1/2 * t[i] * (a[i-1] + 1/3 * j[i] * t[i])), i=1..7)) = goal];</Font></Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSRGRVFHNiI3JS8mSSJhR0YlNiMiIigiIiEvJkkidkdGJUYqRiwvLERJI3AwR0YlIiIiKiYmSSJ0R0YlNiNGM0YzJkYvNiNGLEYzRjMqJkY1IiIjJkYpRjlGMyNGM0Y7KiYmSSJqR0YlRjdGM0Y1IiIkI0YzIiInKiYmRjY2I0Y7RjMmRi9GN0YzRjMqJkZFRjsmRilGN0YzRj0qJiZGNjYjRkFGMyZGL0ZGRjNGMyomRktGOyZGKUZGRjNGPSomJkZARkxGM0ZLRkFGQiomJkY2NiMiIiZGMyZGLzYjIiIlRjNGMyomRlNGOyZGKUZXRjNGPSomJkZARlRGM0ZTRkFGQiomJkY2NiNGQ0YzJkYvRlRGM0YzKiZGaG5GOyZGKUZURjNGPSomJkY2RipGMyZGL0ZpbkYzRjMqJkZeb0Y7JkYpRmluRjNGPSomJkZARipGM0Zeb0ZBRkJJJWdvYWxHRiU=</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">Normal (no double deceleration) case: acceleration reaches zero between acceleration and deceleration phases</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">dd := -1:</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">TT profile</Font></Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">TTEQ := {a[3] = 0, a[1] = dd * dc * amax, a[5] = -dc * amax}:
EQ  := TTEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0, t[1], t[2]}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := solve (TTEQ union {op(AEQ[1..7]), FEQ[1]}, {t[1], t[3], t[5], t[7], seq(a[i],i=1..7)} minus {0}):
subs(subs(JEQ, subs(JEQ, subs(JEQ, subs (JEQ, sols)))), T);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"><Font subscript="false" superscript="false">Express t[6] using t[2]</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := simplify (solve (EQ, VAR), SEQ):
S:=subs (sols, T):
S;</Font>
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Convert the results to C-style code</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[3],optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[4],optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[5],optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6",declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](S[7],optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">WW profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">WWEQ := {t[5] = 0, t[2] = 0, t[6] = 0}:
EQ  := WWEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">sols := simplify (solve (EQ, VAR), SEQ):
S:=subs(sols,T):</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">alias (R=dc*jmax*S[1]):alias (N=op(1,op(2,S[3]))): S;</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">?W profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">TWEQ := {t[6] = 0}:
EQ  := TWEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0, t[1], t[2]}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">sols := simplify(solve(EQ, VAR), SEQ):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">S := subs(sols,T):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">alias(R=op(1,op(2,op(1,op(2,S[3]))))): S;</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, t[1]=t[2], t[2]=t[3], R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z4::float, Z3:: float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input></Group><Group><Input><Text-field firstindent="0.0" layout="Heading 1" leftmargin="0.0" linebreak="space" rightmargin="0.0" style="Heading 1"><Font executable="false" foreground="[0,0,0]" italic="false" subscript="false" superscript="false" underline="false">?T profile</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">WTEQ := {a[5] = dd * dc * amax}:
EQ  := WTEQ union {op(AEQ), op(VEQ), op(FEQ)} union JEQ:
VAR := ({op(T)} union {seq(a[i], i=1..7)} union {seq(v[i], i=1..7)} union {seq(j[i], i=1..7)}) minus {0, t[1], t[2]}:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">sols := simplify(solve(EQ, VAR), SEQ):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">S := subs(sols,T):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">alias (R=</Font>op(1,S[3]))<Font italic="false" subscript="false" superscript="false" underline="false">: S;</Font></Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM3KSZJInRHNiI2IyIiIiZGJTYjIiIjKihJIlJHRiZGKEkjZGNHRiYhIiJJJWptYXhHRiZGLyIiISooLCoqJkYuRihJJWFtYXhHRiZGKEYvJkkiYUdGJjYjRjFGKCoqSSNkYUdGJkYoRi5GKEYwRihGJEYoRi9GLUYoRihGLkYvRjBGLywkKigsMiokRjVGK0YrKiRGNkYrRi8qJkY2RihGLUYoISIlKiZGMEYrRiRGK0YvKiRGLUYrISIjKiYsKComJkkidkdGJkY4RihGMEYoRkQqKEYkRihGNkYoRjBGKEZEKihGKUYoRjZGKEYwRihGREYoRi5GKEYoKiYsJkZCRigqKEYpRihGMEYrRiRGKEYrRihGOkYoRigqKCwmRkpGKyooRjBGKEYkRihGLUYoIiIlRihGOkYoRi5GKEYoRihGMEYvRjVGLyNGKEYrLCQqJkY1RihGMEYvRi8=</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">EQCode := {_Z^4=Z4, _Z^3=Z3, _Z^2=Z2, _Z^1=Z1, a[0]=a0, v[0]=v0, t[1]=t[2], t[2]=t[3], R=root, goal=xTarget, p0=x0}:
VarTypes := <Font italic="false" subscript="false" superscript="false" underline="false">[amax::float, vmax::float, jmax::float, root::float, a0::float, v0::float, Z4::float, Z3:: float, Z2::float, Z1::float]:</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">CodeGeneration[C](subs(EQCode, op(1,R)),optimize,resultname="root",<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes</Font>);</Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">t1 = a0 * da;
t2 = jmax * jmax;
t3 = t[1];
t4 = t2 * t3;
t8 = a0 * a0;
t9 = t8 * t8;
t11 = t[2];
t12 = t8 * t11;
t13 = da * t2;
t14 = t13 * t3;
t17 = t11 * t11;
t19 = t2 * jmax;
t24 = t11 * da;
t25 = t3 * t3;
t26 = t19 * t25;
t30 = dc * jmax;
t31 = amax * amax;
t32 = t31 * t11;
t36 = dc * da;
t37 = jmax * t3;
t40 = dc * amax;
t45 = t36 * t19;
t52 = t11 * a0;
t55 = t30 * t3;
t61 = t3 * a0;
t69 = v0 * jmax;
t72 = t2 * t25;
t77 = 0.24e2 * t52 * t30 - 0.120e3 * t1 * t55 + 0.72e2 * amax * da * t37 + 0.24e2 * t61 * t30 - 0.24e2 * t24 * t4 - 0.12e2 * t13 * t25 + 0.12e2 * t31 + 0.24e2 * t69 * dc + 0.60e2 * t72 + 0.60e2 * t8 - 0.72e2 * t40 * a0;
t79 = t36 * t2;
t80 = t3 * v0;
t81 = t80 * amax;
t84 = t25 * t11;
t85 = t84 * a0;
t88 = dc * t2;
t93 = t8 * a0;
t97 = -0.24e2 * t1 * t4 * v0 + 0.3e1 * t9 - 0.36e2 * t12 * t14 + 0.12e2 * t17 * da * t19 * t3 * amax + 0.12e2 * t24 * t26 * amax + 0.12e2 * t30 * t32 * a0 + (-0.48e2 * t36 * t37 - 0.24e2 * t40 + 0.48e2 * a0) * Z3 - 0.24e2 * t45 * t3 * t17 * a0 - 0.12e2 * t32 * t14 + t77 * Z2 + 0.24e2 * t79 * t81 - 0.36e2 * t45 * t85 - 0.24e2 * t88 * t11 * v0 * amax - 0.8e1 * t93 * dc * amax;
t98 = t2 * t2;
t99 = t25 * t25;
t100 = t98 * t99;
t103 = t25 * t3;
t104 = t19 * t103;
t107 = t98 * t103;
t110 = amax * t8;
t113 = t8 * da;
t122 = t25 * a0;
t123 = t122 * amax;
t126 = t3 * t11;
t132 = dc * t19;
t149 = -0.6e1 * t100 * da - 0.12e2 * t104 * amax + 0.12e2 * t107 * t11 - 0.24e2 * t110 * t37 - 0.30e2 * t113 * t72 + 0.12e2 * t93 * t11 * t30 - 0.24e2 * amax * t19 * t84 + 0.36e2 * t79 * t123 - 0.24e2 * t45 * t126 * v0 - 0.12e2 * t107 * t24 + 0.12e2 * t132 * t25 * v0 + 0.24e2 * t88 * xTarget * amax - 0.24e2 * t88 * x0 * amax + 0.12e2 * t30 * t31 * v0 + 0.12e2 * da * t19 * t103 * amax;
t151 = amax * a0;
t168 = t31 * t3 * a0;
t172 = v0 * v0;
t180 = t11 * jmax;
t186 = v0 * t2;
t189 = t3 * t8;
t193 = -0.24e2 * t151 * t69 + 0.6e1 * t31 * t2 * t25 + 0.12e2 * t17 * t98 * t25 + 0.30e2 * t25 * t8 * t2 + 0.12e2 * t17 * t8 * t2 + 0.12e2 * Z4 + 0.12e2 * t30 * t168 + 0.6e1 * t100 + 0.12e2 * t172 * t2 - 0.24e2 * t88 * t81 + 0.24e2 * t132 * a0 * t103 - 0.24e2 * t110 * t180 + 0.12e2 * t8 * v0 * t30 + 0.24e2 * t186 * t61 + 0.24e2 * t189 * t2 * t11;
t215 = t2 * a0;
t233 = 0.24e2 * t93 + 0.24e2 * t36 * t72 * amax - 0.48e2 * t37 * t151 - 0.72e2 * t113 * t55 - 0.48e2 * t180 * t151 - 0.96e2 * t215 * t24 * t3 - 0.48e2 * t13 * t80 + 0.48e2 * t132 * t84 - 0.72e2 * t215 * da * t25 + 0.96e2 * jmax * a0 * da * t3 * amax + 0.24e2 * t31 * a0;
t261 = -0.48e2 * t88 * t25 * amax + 0.24e2 * t132 * t103 + 0.48e2 * t79 * t126 * amax - 0.24e2 * t36 * t104 + 0.72e2 * t122 * t2 - 0.48e2 * t69 * amax + 0.48e2 * t30 * t12 + 0.48e2 * t30 * a0 * v0 - 0.48e2 * dc * t8 * amax + 0.48e2 * t30 * t189 - 0.24e2 * t36 * t37 * t31;
t293 = 0.24e2 * t186 * t52 - 0.6e1 * t31 * da * t72 + 0.12e2 * t93 * t3 * t30 - 0.24e2 * t36 * t104 * a0 + (t233 + t261) * Z1 - 0.24e2 * t88 * t11 * t61 * amax + 0.6e1 * t31 * t8 - 0.12e2 * t88 * t17 * a0 * amax - 0.12e2 * t36 * t26 * v0 - 0.12e2 * t93 * da * t55 - 0.36e2 * t88 * t123 - 0.12e2 * t36 * jmax * t168 + 0.24e2 * t113 * t37 * amax + 0.36e2 * t132 * t85 + 0.48e2 * t79 * t126 * t151;
root = t97 + t149 + t193 + t293;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[1]),optimize,resultname="time1"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time1 = t[1];</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[2]),optimize,resultname="time2"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time2 = t[2];</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[3]),optimize,resultname="time3"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time3 = root / dc / jmax;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[4]),optimize,resultname="time4"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time4 = 0;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[5]),optimize,resultname="time5"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time5 = (-dc * amax + a0 - da * dc * jmax * t[1] + root) / dc / jmax;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[6]),optimize,resultname="time6"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">t1 = amax * amax;
t3 = a0 * a0;
t6 = jmax * jmax;
t7 = t[1];
t8 = t7 * t7;
t9 = t6 * t8;
t10 = pow(root, 0.2e1);
t14 = t7 * a0 * jmax;
t15 = t[2];
time6 = (0.2e1 * t1 - t3 - 0.4e1 * a0 * root - t9 - 0.2e1 * t10 + (-0.2e1 * v0 * jmax - 0.2e1 * t14 - 0.2e1 * t15 * a0 * jmax) * dc + (t9 + 0.2e1 * t15 * t6 * t7) * da + (0.2e1 * t14 + 0.4e1 * jmax * t7 * root) * da * dc) / jmax / amax / 0.2e1;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font italic="false" subscript="false" superscript="false" underline="false">CodeGeneration[C](subs(EQCode,S[7]),optimize,resultname="time7"</Font>,<Font italic="false" subscript="false" superscript="false" underline="false">declare=VarTypes);</Font></Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">time7 = -amax / jmax;</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Text-field/><Text-field/><Text-field/><Text-field/></Worksheet>